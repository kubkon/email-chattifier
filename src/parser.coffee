markdown = require("markdown").markdown

class Parser
  constructor: (content) ->
    @state   = 'init'
    @content = content

  # convert to markdown
  toMarkdown: ->
    @state = 'toMarkdown'

    # split into lines and iterate:
    # 1. trim whitespaces
    # 2. remove special quote chars such as ">"
    lines = @content.split /\r?\n/
    cleanedLines = []
    for line in lines
      cleanedLines.push @removeSpecialChars(line.trim()).trim()

    @content = cleanedLines.join "\n"

    # convert From...To... blocks into "On...wrote:"
    blockRegex = ///From:
      [\s\S]*?(To|Subject|Date|Cc|Sent):
      [\s\S]*?(To|Subject|Date|Cc|Sent):
      [\s\S]*?(To|Subject|Date|Cc|Sent):
      [\s\S]*?(To|Subject|Date|Cc|Sent):
      (.*\n){1,2}
    ///g

    replacer = (match) =>
      match = match.replace /\r?\n/g, " "
      from = (/From:(.*?)(To|Subject|Date|Cc|Sent):/g.exec match)[1].trim()
      date = (/(Date|Sent):(.*?)(To|Subject|Cc):/g.exec match)[2].trim()
      "On " + date + ", " + from + " wrote:\n\n"

    @content = @content.replace blockRegex, replacer

    # escape any existing '#' tags not generated by us
    @content = @content.replace /(#)/g, "\\$1"

    # tag all "On...wrote:" occurrences with # symbol
    replacer = (match) =>
      match = match.replace /\r?\n/g, " "
      # remove any unwanted characters and strings
      match = match.replace /([\[\]<>]|mailto:|javascript:;)/g, ""
      # make email addresses into hyperlinks
      match = @emailToHyperlink(match)
      "\n# " + match + "\n"

    @content = @content.replace /On [\s\S]*?wrote(:|;)/g, replacer
    this

  # convert to html
  toHTML: ->
    @state = 'toHTML'

    parsedTree = markdown.toHTMLTree markdown.parse @content
    outputTree = [parsedTree[0], ["div"]]
    i = 1

    for el in parsedTree[1..]
      if el[0] == "h1"
        outputTree.push ["div"]
        i += 1

      outputTree[i].push el

    @content = markdown.renderJsonML outputTree
    this

  # log to console
  # for debugging only
  log: ->
    state = "state: " + @state
    content  = "content: " + @content
    msg = "{ " + ([state, content].join "\n") + " }"
    console.log msg
    this

  emailToHyperlink: (str) ->
    emailRegex = /([a-zA-Z0-9_!#$%&'*+\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+)/
    str.replace emailRegex, "[$1](mailto:$1)"

  removeSpecialChars: (str) ->
    regex = /^(?:>\s*){1,}/
    str.replace regex, ""

  matchFromToBlocks: (str) ->
    mainRegex = /From:\s+/g
    indices = []
    temp = str
    while (match = mainRegex.exec temp)
      begin = match.index
      end = begin + match[0].length
      indices.push begin
      temp = temp[end..]

    for i in indices
      console.log i

    # otherTags = ["To:", "Date:", "Subject:", "Sent:", "Cc:"]
    # regex = new RegExp mainTag + "\\s+"
    # match = regex.exec str
    # begin = match.index
    # end = begin + match[0].length

    # regex = new RegExp "[\\s\\S]*?(" + otherTags.join("|") + ")(?![\\s\\S]*?" + mainTag + ")"
    # match = regex.exec str[end..]
    # # console.log str, match
    # end += match[0].length
    # otherTags.splice otherTags.indexOf(match[1]), 1
    # # console.log str, begin, end, "\n\n"
    # [begin, str.length]
    [0, str.length]


module.exports = Parser

