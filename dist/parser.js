// Generated by CoffeeScript 1.10.0
var Parser, markdown;

markdown = require("markdown").markdown;

Parser = (function() {
  function Parser(content) {
    this.state = 'init';
    this.content = content;
  }

  Parser.prototype.cleanIndentation = function() {
    var cleanedLines, j, len, line, lines;
    this.state = 'cleanIndentation';
    lines = this.content.split(/\r?\n/);
    cleanedLines = [];
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      cleanedLines.push(line.trim().replace(/^(?:>\s*){1,}/, "").trim());
    }
    this.content = cleanedLines.join("\n");
    return this;
  };

  Parser.prototype.stripFromToBlocks = function() {
    var blockRegex, replacer;
    this.state = 'stripFromToBlocks';
    blockRegex = /From:[\s\S]*?(To|Subject|Date|Cc|Sent):[\s\S]*?(To|Subject|Date|Cc|Sent):[\s\S]*?(To|Subject|Date|Cc|Sent):[\s\S]*?(To|Subject|Date|Cc|Sent):(.*\n){1,2}/g;
    replacer = (function(_this) {
      return function(match, offset, string) {
        var date, from;
        match = match.replace(/\r?\n/g, " ");
        from = (/From:(.*?)(To|Subject|Date|Cc|Sent):/g.exec(match))[1].trim();
        date = (/(Date|Sent):(.*?)(To|Subject|Cc):/g.exec(match))[2].trim();
        return "On " + date + ", " + from + " wrote:\n\n";
      };
    })(this);
    this.content = this.content.replace(blockRegex, replacer);
    return this;
  };

  Parser.prototype.toMarkdown = function() {
    var replacer;
    this.state = 'toMarkdown';
    this.content = this.content.replace(/(#)/g, "\\$1");
    replacer = (function(_this) {
      return function(match, offset, string) {
        var emailRegex;
        match = match.replace(/\r?\n/g, " ");
        match = match.replace(/([\[\]<>]|mailto:|javascript:;)/g, "");
        emailRegex = /([a-zA-Z0-9_!#$%&'*+\/=?`{|}~^.-]+@[a-zA-Z0-9.-]+)/;
        match = match.replace(emailRegex, "[$1](mailto:$1)");
        return "\n# " + match + "\n";
      };
    })(this);
    this.content = this.content.replace(/On [\s\S]*?wrote(:|;)/g, replacer);
    return this;
  };

  Parser.prototype.toHTML = function() {
    var el, i, j, len, outputTree, parsedTree, ref;
    this.state = 'toHTML';
    parsedTree = markdown.toHTMLTree(markdown.parse(this.content));
    outputTree = [parsedTree[0], ["div"]];
    i = 1;
    ref = parsedTree.slice(1);
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      if (el[0] === "h1") {
        outputTree.push(["div"]);
        i += 1;
      }
      outputTree[i].push(el);
    }
    this.content = markdown.renderJsonML(outputTree);
    return this;
  };

  Parser.prototype.log = function() {
    var content, msg, state;
    state = "state: " + this.state;
    content = "content: " + this.content;
    msg = "{ " + ([state, content].join("\n")) + " }";
    console.log(msg);
    return this;
  };

  return Parser;

})();

module.exports = Parser;
