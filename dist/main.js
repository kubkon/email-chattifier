// Generated by CoffeeScript 1.10.0
var Chattifier, Parser, chattifier;

Parser = require("./Parser.js");

Chattifier = (function() {
  function Chattifier() {
    this.ancestorNode = null;
    this.parser = null;
  }

  Chattifier.prototype.renderHTML = function() {
    this.inferAncestorNode();
    if (this.ancestorNode == null) {
      return;
    }
    this.insertNewLinesIntoDivsAndSpans();
    this.removeBlockquotes();
    this.parser = new Parser(this.ancestorNode.textContent);
    this.parser.cleanIndentation().stripFromToBlocks().toMarkdown().toHTML();
    this.ancestorNode.innerHTML = this.parser.content;
    return this.colorEncode();
  };

  Chattifier.prototype.inferAncestorNode = function() {
    var allElements, blockquotes, el, j, k, len, len1, line, maxEl, ref, ref1, score, scores, searchedEl;
    blockquotes = document.body.getElementsByTagName("blockquote");
    if (blockquotes.length > 0) {
      this.ancestorNode = blockquotes[0].parentNode;
      return;
    }
    allElements = Array.prototype.slice.call(document.body.getElementsByTagName("*"));
    searchedEl = [];
    scores = [];
    ref = allElements.reverse();
    for (j = 0, len = ref.length; j < len; j++) {
      el = ref[j];
      searchedEl.push(el);
      score = 0;
      ref1 = el.textContent.split(/\r?\n/);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        line = ref1[k];
        if (line.match(/^(?:>\s*){2,}/)) {
          score += 1;
        }
      }
      scores.push(score);
    }
    maxEl = Math.max.apply(null, scores);
    if (maxEl > 0) {
      this.ancestorNode = searchedEl[scores.indexOf(maxEl)].parentNode;
    }
  };

  Chattifier.prototype.insertNewLinesIntoDivsAndSpans = function() {
    var div, divs, j, k, len, len1, results, span, spans;
    divs = this.ancestorNode.getElementsByTagName("div");
    for (j = 0, len = divs.length; j < len; j++) {
      div = divs[j];
      div.appendChild(document.createTextNode("\n\n"));
    }
    spans = this.ancestorNode.getElementsByTagName("span");
    results = [];
    for (k = 0, len1 = spans.length; k < len1; k++) {
      span = spans[k];
      results.push(span.appendChild(document.createTextNode("\n\n")));
    }
    return results;
  };

  Chattifier.prototype.removeBlockquotes = function() {
    var blockquotes, bq, bqHtml, newChild, parent, results;
    blockquotes = this.ancestorNode.getElementsByTagName("blockquote");
    results = [];
    while (blockquotes.length > 0) {
      bq = blockquotes[0];
      bqHtml = bq.innerHTML;
      parent = bq.parentNode;
      newChild = document.createElement("p");
      newChild.insertAdjacentHTML('afterbegin', bqHtml);
      parent.insertBefore(newChild, bq);
      parent.removeChild(bq);
      results.push(blockquotes = this.ancestorNode.getElementsByTagName("blockquote"));
    }
    return results;
  };

  Chattifier.prototype.colorEncode = function() {
    var cl, clStyle, classes, colors, div, divs, i, j, k, len, len1, results, style;
    divs = this.ancestorNode.getElementsByTagName("div");
    classes = ['first', 'second'];
    for (i = j = 0, len = divs.length; j < len; i = ++j) {
      div = divs[i];
      div.className = "chattifier " + classes[i % 2];
    }
    style = document.createElement("style");
    style.appendChild(document.createTextNode(""));
    document.head.appendChild(style);
    style.sheet.insertRule("div.chattifier { margin: 2px; display: block; }", 0);
    style.sheet.insertRule("div.chattifier > h1 { margin-bottom: 4px; font-size: 15px; font-family: Georgia,'Times New Roman','Bitstream Charter',Times,serif; }", 0);
    style.sheet.insertRule("div.chattifier > p { margin: 2px; font-size: 15px; font-family: Arial,'Bitstream Vera Sans',Helvetica,Verdana,sans-serif; }", 0);
    colors = ['#FFF', '#F4F4F4'];
    results = [];
    for (i = k = 0, len1 = classes.length; k < len1; i = ++k) {
      cl = classes[i];
      clStyle = "." + cl + " { background-color: " + colors[i] + "; }";
      results.push(style.sheet.insertRule(clStyle, 0));
    }
    return results;
  };

  return Chattifier;

})();

chattifier = new Chattifier();

chattifier.renderHTML();
